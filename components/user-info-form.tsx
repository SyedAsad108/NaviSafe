"use client"

import type React from "react"
import { useEffect, useState } from "react"
import { z } from "zod"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { User, Shield, AlertCircle, CheckCircle, Loader2, ExternalLink } from "lucide-react"
import { useSolanaWallet } from "@/hooks/use-solana-wallet"
import { useBlockchainTransaction } from "@/hooks/use-blockchain-transaction"

interface UserInfoFormProps {
  onSubmit: (userInfo: any) => void
}

type FormData = {
  name: string
  gender: string
  age: string
  idNumber: string
  phone: string
  nationality: string
  email: string
}

const EmailSchema = z.string().email()

export function UserInfoForm({ onSubmit }: UserInfoFormProps) {
  const [formData, setFormData] = useState<FormData>({
    name: "",
    gender: "",
    age: "",
    idNumber: "",
    phone: "",
    nationality: "",
    email: "",
  })

  const [errors, setErrors] = useState<Partial<FormData>>({})
  const [countries, setCountries] = useState<string[]>([])

  const { connected, publicKey } = useSolanaWallet()
  const {
    isLoading: isSubmittingToBlockchain,
    error: blockchainError,
    result: blockchainResult,
    isSuccess: blockchainSuccess,
    registerTourist,
    getExplorerUrl,
    resetState,
  } = useBlockchainTransaction()

  useEffect(() => {
    const fetchCountries = async () => {
      try {
        const res = await fetch("https://api.first.org/data/v1/countries")
        if (!res.ok) throw new Error("Network response was not ok")
        const json = await res.json()
        const countryList = Object.values(json.data).map((c: any) => c.country as string)
        countryList.sort((a, b) => a.localeCompare(b))
        setCountries(countryList)
      } catch (err) {
        console.error("Failed to fetch countries", err)
      }
    }
    fetchCountries()
  }, [])

  const validate = (): Partial<FormData> => {
    const newErrors: Partial<FormData> = {}

    if (!formData.name) newErrors.name = "Full Name is required."
    else if (formData.name.length < 2) newErrors.name = "Name must be at least 2 characters."

    if (!formData.gender) newErrors.gender = "Please select a gender."

    if (!formData.age) newErrors.age = "Age is required."
    else if (isNaN(Number(formData.age)) || Number(formData.age) <= 0 || Number(formData.age) > 120) {
      newErrors.age = "Please enter a valid age."
    }

    if (!formData.nationality) newErrors.nationality = "Country of Origin is required."

    if (!formData.idNumber) newErrors.idNumber = "ID Number is required."

    if (!formData.phone) newErrors.phone = "Phone number is required."
    else if (!/^\+?\d{4,15}$/.test(formData.phone)) {
      newErrors.phone = "Please enter a valid phone number."
    }

    if (formData.email) {
      const parsed = EmailSchema.safeParse(formData.email)
      if (!parsed.success) newErrors.email = "Please enter a valid email address."
    }

    return newErrors
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    const validationErrors = validate()

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors)
      return
    }

    if (!connected || !publicKey) {
      return
    }

    setErrors({})
    resetState()

    try {
      const touristData = {
        digitalId: "", // Will be generated by the service
        name: formData.name,
        gender: formData.gender,
        age: Number.parseInt(formData.age),
        idNumber: formData.idNumber,
        phone: formData.phone,
        nationality: formData.nationality,
        email: formData.email || undefined,
        registrationTimestamp: Date.now(),
      }

      console.log("[v0] Submitting tourist data to blockchain:", touristData)
      const result = await registerTourist(touristData)

      if (result) {
        // Wait a moment to show success, then proceed
        setTimeout(() => {
          onSubmit({
            ...formData,
            blockchainData: {
              digitalId: result.touristAccountAddress, // Use account address as digital ID
              transactionSignature: result.signature,
              slot: result.slot,
              blockTime: result.blockTime,
              touristAccountAddress: result.touristAccountAddress,
            },
          })
        }, 2000)
      }
    } catch (error: any) {
      console.error("[v0] Blockchain submission failed:", error)
    }
  }

  const handleFieldChange = (field: keyof FormData, value: string) => {
    let val = value

    if (field === "phone") {
      val = val.replace(/[^\d+]/g, "")
      if (val.includes("+")) {
        const digitsOnly = val.replace(/\+/g, "").replace(/\D/g, "")
        val = "+" + digitsOnly
      } else {
        val = val.replace(/\D/g, "")
      }
    }

    setFormData((prev) => ({ ...prev, [field]: val }))

    if (errors[field]) setErrors((prev) => ({ ...prev, [field]: undefined }))
  }

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-primary/5 to-accent/5">
      <Card className="w-full max-w-md animate-in fade-in-0 slide-in-from-bottom-4 duration-500">
        <CardHeader className="text-center space-y-2">
          <div className="flex justify-center">
            <div className="p-3 bg-primary/10 rounded-full">
              <User className="h-8 w-8 text-primary" />
            </div>
          </div>
          <CardTitle className="text-2xl">Personal Information</CardTitle>
          <p className="text-sm text-muted-foreground">Please provide your details for safety monitoring</p>

          {connected && publicKey && (
            <div className="p-3 bg-green-50 dark:bg-green-950/30 rounded-lg border border-green-200 dark:border-green-800">
              <div className="flex items-center justify-center space-x-2">
                <Shield className="h-4 w-4 text-green-600" />
                <span className="text-sm font-medium text-green-800 dark:text-green-200">Wallet Connected</span>
              </div>
              <div className="text-xs text-green-700 dark:text-green-300 mt-1">
                {publicKey.slice(0, 4)}...{publicKey.slice(-4)}
              </div>
            </div>
          )}
        </CardHeader>

        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            {blockchainError && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{blockchainError}</AlertDescription>
              </Alert>
            )}

            {blockchainSuccess && blockchainResult && (
              <Alert className="border-green-200 bg-green-50 dark:bg-green-950/30">
                <CheckCircle className="h-4 w-4 text-green-600" />
                <AlertDescription className="text-green-800 dark:text-green-200">
                  <div className="space-y-2">
                    <p>Data successfully submitted to Solana blockchain!</p>
                    <div className="flex items-center space-x-2 text-xs">
                      <span>Transaction:</span>
                      <a
                        href={getExplorerUrl(blockchainResult.signature)}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-600 hover:text-blue-800 underline inline-flex items-center"
                      >
                        {blockchainResult.signature.slice(0, 8)}...
                        <ExternalLink className="h-3 w-3 ml-1" />
                      </a>
                    </div>
                  </div>
                </AlertDescription>
              </Alert>
            )}

            <div className="space-y-3">
              <Label htmlFor="name">Full Name</Label>
              <Input
                id="name"
                placeholder="Enter your full name"
                value={formData.name}
                onChange={(e) => handleFieldChange("name", e.target.value)}
                disabled={isSubmittingToBlockchain}
              />
              {errors.name && <p className="text-sm text-destructive">{errors.name}</p>}
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-3">
                <Label htmlFor="gender">Gender</Label>
                <Select
                  value={formData.gender}
                  onValueChange={(value) => handleFieldChange("gender", value)}
                  disabled={isSubmittingToBlockchain}
                >
                  <SelectTrigger id="gender">
                    <SelectValue placeholder="Select" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="male" className="hover:bg-blue-700 focus:bg-blue-800 text-white">
                      Male
                    </SelectItem>
                    <SelectItem value="female" className="hover:bg-blue-700 focus:bg-blue-800 text-white">
                      Female
                    </SelectItem>
                    <SelectItem value="other" className="hover:bg-blue-700 focus:bg-blue-800 text-white">
                      Other
                    </SelectItem>
                  </SelectContent>
                </Select>
                {errors.gender && <p className="text-sm text-destructive">{errors.gender}</p>}
              </div>

              <div className="space-y-3">
                <Label htmlFor="age">Age</Label>
                <Input
                  id="age"
                  type="number"
                  placeholder="Age"
                  value={formData.age}
                  onChange={(e) => handleFieldChange("age", e.target.value)}
                  disabled={isSubmittingToBlockchain}
                />
                {errors.age && <p className="text-sm text-destructive">{errors.age}</p>}
              </div>
            </div>

            <div className="space-y-3">
              <Label htmlFor="nationality">Country of Origin</Label>
              <Select
                value={formData.nationality}
                onValueChange={(value) => handleFieldChange("nationality", value)}
                disabled={countries.length === 0 || isSubmittingToBlockchain}
              >
                <SelectTrigger id="nationality">
                  <SelectValue placeholder={countries.length === 0 ? "Loading countries..." : "Select your country"} />
                </SelectTrigger>
                <SelectContent className="max-h-60 overflow-auto">
                  {countries.map((c) => (
                    <SelectItem key={c} value={c} className="hover:bg-blue-700 focus:bg-blue-800 text-white">
                      {c}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {errors.nationality && <p className="text-sm text-destructive">{errors.nationality}</p>}
            </div>

            <div className="space-y-3">
              <Label htmlFor="idNumber">Passport/Aadhaar Number</Label>
              <Input
                id="idNumber"
                placeholder="Enter ID number"
                value={formData.idNumber}
                onChange={(e) => handleFieldChange("idNumber", e.target.value)}
                disabled={isSubmittingToBlockchain}
              />
              {errors.idNumber && <p className="text-sm text-destructive">{errors.idNumber}</p>}
            </div>

            <div className="space-y-3">
              <Label htmlFor="phone">Phone Number</Label>
              <Input
                id="phone"
                type="tel"
                placeholder="+91 XXXXX XXXXX"
                value={formData.phone}
                onChange={(e) => handleFieldChange("phone", e.target.value)}
                disabled={isSubmittingToBlockchain}
              />
              {errors.phone && <p className="text-sm text-destructive">{errors.phone}</p>}
            </div>

            <div className="space-y-3">
              <Label htmlFor="email">Email Address (Optional)</Label>
              <Input
                id="email"
                type="email"
                placeholder="your.email@example.com"
                value={formData.email}
                onChange={(e) => handleFieldChange("email", e.target.value)}
                disabled={isSubmittingToBlockchain}
              />
              {errors.email && <p className="text-sm text-destructive">{errors.email}</p>}
            </div>

            <div className="p-3 bg-blue-50 dark:bg-blue-950/30 rounded-lg border border-blue-200 dark:border-blue-800">
              <div className="flex items-center space-x-2 mb-2">
                <Shield className="h-4 w-4 text-blue-600" />
                <span className="text-sm font-medium text-blue-800 dark:text-blue-200">Blockchain Security</span>
              </div>
              <p className="text-xs text-blue-700 dark:text-blue-300">
                Your data will be securely stored on Solana Devnet blockchain for verification and privacy protection.
              </p>
              <p className="text-xs text-blue-700 dark:text-blue-300 mt-1">
                <strong>Note:</strong> You'll need to approve a blockchain transaction (no cost) to complete
                registration.
              </p>
            </div>

            <div className="pt-4">
              <Button
                type="submit"
                className="w-full bg-blue-700 hover:bg-blue-800 text-white"
                disabled={isSubmittingToBlockchain || !connected}
              >
                {isSubmittingToBlockchain ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Submitting to Blockchain...
                  </>
                ) : (
                  "Continue"
                )}
              </Button>

              {!connected && (
                <p className="text-xs text-muted-foreground text-center mt-2">Please connect your wallet to continue</p>
              )}
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  )
}
